* AssignHotKey, AssignSliderHotkey, KeyBind, SliderKeyBind
	-> Exchange them to something faster and rational

* AdvancedSceneEditor
	-> REMOVE COMPLETELY and change to something slider-like, for
	   example SceneEditor.
	-> REMOVE COMPLETELY EditSceneValue

* Put back old shortcut keys (application menus)

* Rename BusProperties to BusManager
* Enable BusManager item renaming (i.e. remove QInputDialog)

* Remove startMutex from Chaser -- WTF is it for?

* Add FunctionSelection to SF.net SVN

* Remove plain selection capabilities from FunctionManager

* ConsoleChannel's value menus...? Do they work, allocation & deletion.

* Plugins', Fixtures, FixtureManager's RichText colors

* Rename DMXMapEditor to OutputManager

* Rename FunctionCollection to Collection (same for its editor)

* All functions' editing capabilities don't need to be inside mutexes and
  running locks, since all functions are stopped before switching to
  design mode. And no editing is possible in operate mode. So remove the
  locks.

* FunctionCollection::stop() stops all of its member functions, regardless of
  whether they have been started by the collection or some other (user,chaser,
  another collection). Should be fixed somehow.

* Workspace background & theme. Also saving & loading of.

* REMOVE COMPLETELY dummyinplugin; it's completely useless now that
  there is no "default" input plugin.

* EFX's and EFXEditor to support 16bit values
* EFXEditor to support channel groups (now it searches for "pan" or "tilt")
* Phase parameter to EFX's so that multiple fixtures can do cooler effects.
  -> Elie Roux:
   Let's say for example you have 4 MAC in the back of the scene in a
   concert, and the four of them make a circle (or an ellipse or
   something). If the 4 do the same movement at the same time, you'll get
   the feeling that it's "cheap". If, on the other side, you have the first
   mac doing the circle, the next mac doing the circle but in advance of
   Pi/2, the third in advance of Pi and the fourth in advance of 3Pi/2,
   you'll still have the circle effect, but also a wave effect, which is
   really sexy, and used a lot by all lighting engineers, at least in the
   west of France. For this you have to give a phase to every movement (the
   movement of the first mac will have a phase of 0, the second 90, the
   third 180 and the fourth 270). I admit it is quite boring to use, but
   with the actual state of qlc, I couldn't really do it another way. In
   tables like GrandMa or Martin Case, you have a window in which you
   represent physically  (and very basically, no ray tracing or other
   complicated stuff) where you fixtures will be, with that the table
   automatically generates the phases. That would be the kind of patches we
   may create for qlc.

* Should Fixture inherit QLCFixtureDef? Would it be nicer, are there any
  benefits?

* Put all gfx into a .qrc file and compile that into the binary with qmake

* Put FixtureConsole inside QMdiSubWindow (in Fixture class)
* FixtureConsole's window title (plus when fixture renamed) thru QMdiSubWindow
* FixtureConsole multiple selection for bulk removal, maybe remove the
  question dialog?
* FixtureConsole reloads the whole list after each operation. Make smarter.

* FixtureManager's window title thru QMdiSubWindow
* FixtureManager::loader()
* Removal of multiple fixtures from FixtureManager should be easier. Maybe
  multiple selection?
* FixtureManager's automatic function generation should be made smarter and
  incorporated into FunctionManager. So that user can select, which groups
  of functions to generate etc.. NEEDS MORE SPECS.
* FixtureManager::slotClone() opens fixture properties. Could this be avoided?
  It would be easier to create multiple clones without the properties dialog.

* FunctionConsumer's timer type should be configurable

* FunctionManager thru QMdiSubWindow and its window title & icon the same
* FunctionManager shortcut keys
* Check that FunctionManager tracks bus name changes correctly
* Bus setting doesn't work since action signals don't send the action 
  itself, and 32 individual slot connections seems like dumb.
* FunctionManager::addFunction() -> check function creation failure when
  maximum number of functions is reached.
* Some sophisticated way for editing scenes now that AdvancedSceneEditor
  has been removed.

* Monitor title & icon thru QMdiSubWindow
* Monitor loading doesn't work. Put its settings into a separate class 
  inside Monitor and deal with them. The monitor itself can then be 
  created and destroyed at will.
* Multiple monitors for different universes?
* Monitor scrolling - so that the display doesn't always start from channel 1
* QApplication locks were removed from Monitor since they shouldn't be
  necessary with a QTimer (if it were a thread, then locks would be needed).
* Monitor drawing should be optimized so that slotTimeout() updates only
  values and not labels at all, since they dont change unless something
  passes over them (like another window).

* m_startMutex in Scene, again, wtf is it for??
* m_startMutex comes from Function, is it really necessary ANYWHERE?

* Tooltips to ALL widgets.

* VC* widgets to use input mapping: BIG TODO

* HTP channels to DMXMap. Maybe limit the number, since they are needed
  only for dimmer fixtures. Or bind somehow to the generic fixture def.

* VCWidgets should have object names
* Change VCWidget's moving threshold checks to use QPoint::manhattanLength()

* Add message boxes to all editor windows to indicate if there are no
  fixtures or functions, whichever is appropriate.
  -> XYPad crashes if there are no fixtures.

* Some way of printing an address map to printer to help fixture patching.
* Graphical view of stage and fixture layout. Plain top view will do for now.
* Fixture type icons (head, scanner and also: 6-bar, 12-bar etc. for dimmers)
* Gobo icons (from vendor's websites)
